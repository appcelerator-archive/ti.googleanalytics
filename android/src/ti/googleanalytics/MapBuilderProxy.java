/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.googleanalytics;

import java.util.HashMap;
import java.util.Map;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import com.google.analytics.tracking.android.MapBuilder;

@Kroll.proxy
public class MapBuilderProxy extends KrollProxy {

	private MapBuilder _mb;

	public MapBuilderProxy() {
	}

	public MapBuilderProxy(MapBuilder mapBuilder) {
		_mb = mapBuilder;
	}

	@Kroll.method
	public MapBuilderProxy createAppView() {
		_mb = MapBuilder.createAppView();
		return this;
	}

	@Kroll.method
	public MapBuilderProxy createEvent(String category, String action, @Kroll.argument(optional = true) String label, @Kroll.argument(optional = true) Long value) {
		_mb = MapBuilder.createEvent(category, action, label, value);
		return this;
	}

	@Kroll.method
	public MapBuilderProxy createException(String exceptionDescription, @Kroll.argument(optional = true) Boolean fatal) {
		_mb = MapBuilder.createException(exceptionDescription, fatal);
		return this;
	}

	@Kroll.method
	public MapBuilderProxy createItem(String transactionId, String name, @Kroll.argument(optional = true) String sku, @Kroll.argument(optional = true) String category, @Kroll.argument(optional = true) Double price,
			@Kroll.argument(optional = true) Long quantity, @Kroll.argument(optional = true) String currencyCode) {
		_mb = MapBuilder.createItem(transactionId, name, sku, category, price, quantity, currencyCode);
		return this;
	}

	@Kroll.method
	public MapBuilderProxy createSocial(String network, String action, @Kroll.argument(optional = true) String target) {
		_mb = MapBuilder.createSocial(network, action, target);
		return this;
	}

	@Kroll.method
	public MapBuilderProxy createTiming(String category, Long intervalInMilliseconds, String name, String label) {
		_mb = MapBuilder.createTiming(category, intervalInMilliseconds, name, label);
		return this;
	}

	@Kroll.method
	public MapBuilderProxy createTransaction(String transactionId, @Kroll.argument(optional = true) String affiliation, @Kroll.argument(optional = true) Double revenue, @Kroll.argument(optional = true) Double tax,
			@Kroll.argument(optional = true) Double shipping, @Kroll.argument(optional = true) String currencyCode) {
		_mb = MapBuilder.createTransaction(transactionId, affiliation, revenue, tax, shipping, currencyCode);
		return this;
	}

	@Kroll.method
	@SuppressWarnings("rawtypes")
	public HashMap build() {
		Map<String, String> map = _mb.build();
		HashMap<String, String> retVal = new HashMap<String, String>();
		for (String key : map.keySet()) {
			retVal.put(key, map.get(key));
		}
		return retVal;
	}

	@Kroll.method
	public String get(String paramName) {
		return _mb.get(paramName);
	}

	@Kroll.method
	public MapBuilderProxy set(String paramName, String paramValue) {
		_mb = _mb.set(paramName, paramValue);
		return this;
	}

	@Kroll.method
	@SuppressWarnings("rawtypes")
	public MapBuilderProxy setAll(HashMap args) {
		Map<String, String> params = new HashMap<String, String>();
		for (Object key : args.keySet()) {
			params.put(key.toString(), args.get(key).toString());
		}
		_mb = _mb.setAll(params);
		return this;
	}

	@Kroll.method
	public MapBuilderProxy setCampaignParamsFromUrl(String utmParams) {
		_mb = _mb.setCampaignParamsFromUrl(utmParams);
		return this;
	}
}